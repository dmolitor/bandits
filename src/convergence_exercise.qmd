---
title: "HW 4"
subtitle: "Daniel Molitor (djm484)"
format:
  html:
    embed-resources: true
jupyter: python3
---

The following contains code and output for "Understanding Convergence Concepts".

```{python}
import numpy as np
import plotnine as pn
import pandas as pd
from tqdm import tqdm

gen = np.random.Generator(np.random.PCG64())

def convergence_plots(simulate_path, n_max, M, K, eps, r=2, r_mean=False):

    ns = {"n": list(range(1, n_max + 1))}
    ms = {}
    ps = {}
    a_s = {}
    alphas = {}
    es = {}

    # Generate M realizations
    for m in range(M):
        ms[f"m{m}"] = simulate_path(n_max)

        # Generate alphas
        alph = []
        for idx in range(int(K*n_max)):
            alph.append(np.any(np.abs(ms[f"m{m}"][idx:]) > eps))
        for idx in range(int(K*n_max)):
            alph.append(np.NaN)
        a_s[f"a{m}"] = alph

    props = []
    for values in zip(*ms.values()):
        prop = np.mean([np.abs(x) > eps for x in values])
        props.append(prop)
    ps["p_hat"] = props

    if r_mean:
        e_hats = []
        for values in zip(*ms.values()):
            rmean_val = np.mean([x**r for x in values])
            e_hats.append(rmean_val)
        es["e_hat"] = e_hats

    alpha_props = []
    for values in zip(*a_s.values()):
        prop = np.mean(values)
        alpha_props.append(prop)
    alphas["a_hat"] = alpha_props

    conv_in_prob_dict = {**ns, **ms, **ps, **alphas}
    if r_mean:
       conv_in_prob_dict = {**conv_in_prob_dict, **es}
    conv_in_prob = pd.DataFrame(conv_in_prob_dict)
    
    # Pivot longer
    m_cols = [col for col in conv_in_prob.columns if col.startswith("m")]
    conv_in_prob_long = pd.melt(
        conv_in_prob,
        id_vars=["n", "p_hat"],
        value_vars=m_cols,
        var_name="m",
        value_name="mean"
    )
    p_hat_alpha_hat_df = pd.melt(
        conv_in_prob,
        id_vars=["n"],
        value_vars=["p_hat", "a_hat"],
        var_name="convergence_type",
        value_name="prop"
    )

    # Plotting
    path_plot = (
        pn.ggplot(
            conv_in_prob_long,
            pn.aes(x = "n", y = "mean", group = "m")
        )
        + pn.geom_line(alpha = 0.1)
        + pn.geom_hline(yintercept=0.05, color = "blue")
        + pn.geom_hline(yintercept=-0.05, color = "blue")
        + pn.theme_538()
        + pn.labs(title="Sample paths for M(=500)", y="Sample mean", x="N")
        + pn.theme(plot_title=pn.element_text(hjust=0.5, weight="bold"))
    )

    p_hat_alpha_hat = (
        pn.ggplot(
            p_hat_alpha_hat_df,
            pn.aes(x="n", y="prop", color="convergence_type")
        )
        + pn.geom_line()
        + pn.theme_538()
        + pn.labs(title="Criterion value for convergence", y="Fraction", x="N")
        + pn.theme(plot_title=pn.element_text(hjust=0.5, weight="bold"))
    )

    if r_mean:
        e_plot = (
            pn.ggplot(
                conv_in_prob,
                pn.aes(x = "n", y = "e_hat")
            )
            + pn.geom_line(group=1)
            + pn.theme_538()
            + pn.labs(title="Convergence in r-th mean", y="e_{n, r}", x="N")
            + pn.theme(plot_title=pn.element_text(hjust=0.5, weight="bold"))
        )
    
    if r_mean:
        return_val = {
            "path_plot": path_plot,
            "convergence_plot": p_hat_alpha_hat,
            "r_mean_plot": e_plot
        }
    else:
        return_val = {
            "path_plot": path_plot,
            "convergence_plot": p_hat_alpha_hat
        }

    return return_val
```

## Paper: Figure 3
```{python}
#| layout-ncol: 2

def simulate_path_fig3(n):
    means = []
    for i in range(1, n+1):
        samples = gen.normal(0, 1, i)
        means.append(np.mean(samples))
    return means

figure_3 = convergence_plots(simulate_path_fig3, n_max=2000, M=500, K=0.5, eps=0.1)
figure_3["path_plot"].show()
figure_3["convergence_plot"].show()
```

## Paper: Figure 6
```{python}
#| layout-ncol: 2

def produce_interval(n):
  k = 1
  while k >= 1:
    m = 0
    while m < (2**k):
      if (n == ((2**k) + m)):
        return(m,k)
      else:
        m += 1
    k += 1

def x_n(z, n):
  # define the interval
  if n == 1:
    if 0 <= z < 1:
      return 1
    else:
      return 0
  m,k = produce_interval(n)

  lb = m*(2**(-k))
  ub = (m+1)*(2**(-k))

  if lb <= z < ub:
    return 1
  else:
    return 0

def simulate_path_fig6(n):
    z = gen.uniform(0, 1)
    return [x_n(z, i) for i in range(1,n+1)]

figure_6 = convergence_plots(
    simulate_path_fig6,
    n_max=2000,
    M=500,
    K=0.5,
    eps=0.05
)

figure_6["path_plot"].show()
figure_6["convergence_plot"].show()
```

## Appendix: Exercise 1

```{python}
#| layout-ncol: 2

def simulate_path_ex1(n):
    x_1 = gen.normal(0, 1)
    return [gen.normal(0, 1) - x_1 for i in range(1,n+1)]

exercise_1 = convergence_plots(simulate_path_ex1, 2000, 500, 0.5, 0.05)
exercise_1["path_plot"].show()
cvg_plot = (
  exercise_1["convergence_plot"] + pn.scale_y_continuous(limits=[0, 1])
)
cvg_plot.show()
```

## Appendix: Exercise 2

```{python}
#| layout-ncol: 2

def simulate_path_ex2(n):
    return [(np.sqrt(i) * gen.binomial(1, (1/i), 1))[0] for i in range(1,n+1)]

exercise_2 = convergence_plots(simulate_path_ex2, 2000, 1000, 0.5, 0.05, r_mean=True)
exercise_2["r_mean_plot"].show()
exercise_2["convergence_plot"].show()
```

## Appendix: Exercise 3

```{python}
#| layout-ncol: 2

def x_n(n, z):
   return 0 <= z < (1/n)

def simulate_path_ex3(n):
    z = gen.uniform(0, 1)
    return [(2**i)*x_n(i, z) for i in range(1,n+1)]

exercise_3_lim = convergence_plots(simulate_path_ex3, 20, 500, 0.5, 0.05, r_mean=True)
exercise_3 = convergence_plots(simulate_path_ex3, 2000, 500, 0.5, 0.05, r_mean=False)
exercise_3_lim["r_mean_plot"].show()
exercise_3["convergence_plot"].show()
```

## Appendix: Exercise 4

```{python}
#| layout-ncol: 2

def simulate_path_ex4(n):
    out = []
    ys = gen.normal(0, 1, n)
    for i in range(1, n+1):
        if i <= 2:
            out.append(1)
        else:
            x_n = np.sum(ys[:i])/((2*i*np.log(np.log(i)))**(1/2))
            out.append(x_n)
    return out

exercise_4 = convergence_plots(simulate_path_ex4, 2000, 500, 0.5, 0.05, r_mean=True)
exercise_4["r_mean_plot"].show()
cvg_plot = (
  exercise_4["convergence_plot"] + pn.scale_y_continuous(limits=[0, 1])
)
cvg_plot.show()
```

## Appendix: Exercise 5

```{python}
def simulate_path_ex5(n):
    out = []
    ys = np.random.choice(list(range(10)), n)
    z = gen.uniform(0, 1)
    for i in range(1, n+1):
        x_n = np.sum(ys[:i]/(10**i)) - z
        out.append(x_n)
    return out

exercise_5 = convergence_plots(simulate_path_ex5, 2000, 500, 0.5, 0.05, r_mean=True)
plot = exercise_5["convergence_plot"] + pn.scale_y_continuous(limits=[0, 1])
plot.show()
```
